{"version":3,"sources":["components/Jumbotron.js","utils/data.js","components/marvel.js","components/Card.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","id","Card","img","this","clicked","imgs","map","link","data","image","props","cardSytle","maxWitdh","display","backgroundImage","background","backgroundSize","backgroundPosition","style","onClick","handleClick","card","Game","state","cards","Data","Score","TopScore","scoreUpdate","newScore","setState","localStorage","setItem","JSON","stringify","console","log","includes","storage","parse","getItem","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","randomData","randomizer","marvelData","i","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13f39581.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Jumbotron = () => {\r\n    return (\r\n        <div>\r\n            <div className=\"jumbotron\">\r\n                <div className=\"container\">\r\n                   <h1>Clicky</h1>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Jumbotron;","let id = 0;\r\n\r\nlet imgs = [\r\n    \"#\",\r\n    \"#\",\r\n    \"#\",\r\n    \"#\",\r\n    \"#\",\r\n    \"#\",\r\n    \"#\",\r\n    \"#\",\r\n    \"#\",\r\n    \"#\",\r\n    \"#\",\r\n    \"#\",\r\n]\r\n\r\nfunction Card(img){\r\n    id++;\r\n    \r\n    this.id = id;\r\n    this.img = img;\r\n    this.clicked = false;\r\n}\r\n\r\nexport default imgs.map(link => new Card(link))","const data = [\r\n    {\r\n        id: 1,\r\n        image: \"https://github.com/Pyeung/react-clicky/blob/master/src/image/antman.jpg?raw=true\"\r\n    },\r\n    {\r\n        id: 2,\r\n        image: \"https://pyeung.github.io/react-clicky/image/hulk.jpg?raw=true\"\r\n    },\r\n    {\r\n        id: 3,\r\n        image: \".\\image\\black-panther.jpg\"\r\n    },\r\n    {\r\n        id: 4,\r\n        image: \"./image/groot.jpg\"\r\n    },\r\n    {\r\n        id: 5,\r\n        image: \"../image/ironman.jpg\"\r\n    },\r\n    {\r\n        id: 6,\r\n        image: \"./image/falcon.jpg\"\r\n    },\r\n    {\r\n        id: 7,\r\n        image: \"./image/scarlet.jpg\"\r\n    },\r\n    {\r\n        id: 8,\r\n        image: \"./image/winter.jpg\"\r\n    },\r\n    {\r\n        id: 9,\r\n        image: \"./image/thor.jpg\"\r\n    },\r\n    {\r\n        id: 10,\r\n        image: \"./image/capt-marvel.jpg\"\r\n    },\r\n    {\r\n        id:11,\r\n        image: \"./image/capt-america.jpg\"\r\n    },\r\n    {\r\n        id:12,\r\n        image: \"./image/spider.jpg\"\r\n    }\r\n]\r\n\r\nexport default data;","import React from \"react\";\r\nconst Card = props => {\r\n  const cardSytle = {\r\n    maxWitdh: \"150px\",\r\n    display: \"inline-block\",\r\n    backgroundImage: `url(${props.background})`,\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"top\"\r\n  \r\n  };\r\n  return (\r\n    <div\r\n      className=\"card\"\r\n      style={cardSytle}\r\n      onClick={() => props.handleClick(props.card.id)}\r\n    >\r\n      {/* unable to link any img */}\r\n\r\n      <h3>{props.card.id}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","// let priorClick = false;\r\n// let updateCards = this.state.cards.map(card => {\r\n//   if (card.id === id) {\r\n//     if (card.clicked) {\r\n//       priorClick = true;\r\n//       return card;\r\n//     } else {\r\n//       return {\r\n//         ...card,\r\n//         clicked: true\r\n//       };\r\n//     }\r\n//   } else {\r\n//     return card;\r\n//   }\r\n// });\r\n// if(priorClick){\r\n//     console.log(\"RESET\")\r\n//     this.setState({ cards: Data }, ()=> console.log(this.state.cards))\r\n// } else {\r\n//     this.setState({ cards: updateCards}, ()=>console.log(this.state.cards))\r\n// }\r\n\r\nimport React, { Component } from \"react\";\r\nimport Data from \"../utils/data\";\r\nimport marvelData from \"./marvel\";\r\nimport Card from \"./Card\";\r\n\r\nclass Game extends Component {\r\n  // Initial Score state\r\n  state = {\r\n    cards: Data,\r\n    clicked: [],\r\n    Score: 0,\r\n    TopScore: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    var storage = JSON.parse(localStorage.getItem(\"clickyGame\")) || 0;\r\n\r\n    console.log(Data);\r\n\r\n    this.setState({ TopScore: storage || 0 });\r\n  }\r\n\r\n  scoreUpdate = () => {\r\n    var newScore = this.state.Score + 1;\r\n    this.setState(\r\n      {\r\n        Score: newScore,\r\n        TopScore:\r\n          this.state.TopScore < newScore ? newScore : this.state.TopScore\r\n      },\r\n      () =>\r\n        localStorage.setItem(\"clickyGame\", JSON.stringify(this.state.TopScore))\r\n    );\r\n  };\r\n\r\n  randomizer(array) {\r\n    let currentIndex = array.length;\r\n    let temporaryValue;\r\n    let randomIndex;\r\n  \r\n    while (0 !== currentIndex) {\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n  \r\n    return array;\r\n  }\r\n\r\n  handleClick = id => {\r\n    console.log(id, this.state.clicked);\r\n    if (this.state.clicked.includes(id)) {\r\n      console.log(\"RESET\");\r\n      this.setState({ clicked: [], Score: 0 });\r\n    } else {\r\n      this.scoreUpdate();\r\n      this.setState({ clicked: [...this.state.clicked, id] });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const randomData = this.randomizer(marvelData);\r\n    return (\r\n      <div className=\"container\">\r\n        Score: {this.state.Score}, TopScore: {this.state.TopScore} <br />\r\n        <div className=\"GameBox\">\r\n          {this.state.cards.map((card, i) => (\r\n            <Card\r\n              key={i + \"-card\"}\r\n              card={card}\r\n              handleClick={this.handleClick}\r\n              background={randomData[i].image}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Game from \"./components/Game\";\nimport \"./App.css\";\n\n\nfunction App() {\n  return (\n    <>\n      <div>\n\n      <Jumbotron />\n      <Game />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}